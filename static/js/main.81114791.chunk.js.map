{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","todolist/Task.tsx","api/todolistAPI.ts","store/login-reducer.ts","store/app-reducer.ts","store/tasks-reducer.ts","todolist/Todolist.tsx","store/todolists-reducer.ts","todolist/TodolistsList.tsx","components/ErrorSnackBar.tsx","login/Login.tsx","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","disabled","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","key","className","status","Checkbox","Delete","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","result","data","post","delete","put","todolistId","taskId","authAPI","initialState","isAuth","type","authMe","dispatch","a","changeAppStatus","resultCode","setErrorApp","response","message","initialApp","removeTaskAC","addTaskAC","changeTaskStatusAC","setTasksSuccess","tasks","updateTask","modal","getState","find","t","item","messages","length","Todolist","todolist","allTasks","useSelector","state","useDispatch","useEffect","items","addTask","createTask","changeStatus","newTitle","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","filter","entityStatus","map","style","paddingTop","Button","payload","setTodolistStatus","TodolistsList","todolists","auth","deleteTodolist","changeTodolist","addTodolist","addTodolistThunk","Grid","container","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","email","password","initialValues","rememberMe","onSubmit","values","justify","xs","handleSubmit","FormControl","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","FormLabel","href","target","AppWithRedux","init","AppBar","position","Toolbar","edge","aria-label","Menu","height","LinearProgress","Container","fixed","exact","path","render","rootReducer","combineReducers","action","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.81114791.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   disabled={props.disabled}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return editMode\r\n        ?\r\n        <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span  onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../components/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskType} from '../api/todolistAPI';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, status: number) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id),\r\n        [props]);\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked ? 2 : 0\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue)\r\n    }, [props]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue)\r\n    }, [props]);\r\n    return <div key={props.task.id} className={props.task.status === 2 ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === 2}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}/>\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ef3df34b-f620-4141-98a4-941ac190a9df'\r\n    }\r\n})\r\n\r\n\r\nexport const todolistAPI = {\r\n    async getTodolist() {\r\n        const result = await instance.get<Array<TodolistType>>('todo-lists')\r\n        return result.data\r\n    },\r\n    async createTodolist(title: string) {\r\n        const result = await instance.post<DataType<{item: TodolistType}>>(`todo-lists/`, {title})\r\n        return result.data\r\n    },\r\n    async deleteTodolist(id: string) {\r\n        const result = await instance.delete<DataType<{}>>(`todo-lists/${id}`)\r\n        return result.data\r\n    },\r\n    async updateTitleTodolist(id: string, title: string) {\r\n        const result = await instance.put<DataType<{}>>(`todo-lists/${id}`, {title})\r\n        return result.data\r\n    },\r\n    async getTasks(todolistId: string) {\r\n        const result = await instance.get<GetTaskType>(`todo-lists/${todolistId}/tasks`)\r\n        return result.data\r\n    },\r\n    async createTask(todolistId: string, title: string) {\r\n        const result = await instance.post<DataType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n        return result.data\r\n    },\r\n    async deleteTask(todolistId: string, taskId: string) {\r\n        const result = await instance.delete<DataType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return result.data\r\n    },\r\n    async updateTask(todolistId: string, taskId: string, task:TaskType) {\r\n        const result = await instance.put<DataType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, task)\r\n        return result.data\r\n    }\r\n\r\n}\r\nexport const authAPI = {\r\n    async login(data: LoginType) {\r\n        const result = await instance.post<DataType<{userId?:string}>>('/auth/login', data)\r\n        return result.data\r\n    },\r\n    async logOut() {\r\n        const result = await instance.delete<DataType<{}>>('/auth/login')\r\n        return result.data\r\n    },\r\n    async authMe() {\r\n        const result = await instance.get<DataType<{email:string}>>('/auth/me')\r\n        return result.data\r\n    }\r\n\r\n}\r\n// type\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype DataType<T> = {\r\n    data: T\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTaskType = {\r\n    error: string | null\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {AppActionType, changeAppStatus, setErrorApp} from './app-reducer'\r\nimport {authAPI, LoginType} from '../api/todolistAPI'\r\nimport {Dispatch} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\n\r\nconst initialState = {\r\n    isAuth: false\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: LoginActionType) => {\r\n    switch (action.type) {\r\n        case 'LOGIN-REDUCER/ISAUTH':\r\n            return {...state, isAuth: action.isAuth}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const isAuth = (isAuth: boolean) => ({type: 'LOGIN-REDUCER/ISAUTH', isAuth} as const)\r\n//thunk\r\nexport const loginThunk = (data: LoginType) => async (dispatch:DispatchLoginType) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const result = await authAPI.login(data)\r\n        dispatch(changeAppStatus('idle'))\r\n        if(result.resultCode === 0){\r\n            dispatch(isAuth(true))\r\n            dispatch(authMe())\r\n        }\r\n    }\r\n    catch (e) {\r\n        dispatch(setErrorApp(e.response.message))\r\n    }\r\n}\r\nexport const logOut = () => async (dispatch:DispatchLoginType) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const result = await authAPI.logOut()\r\n        dispatch(changeAppStatus('idle'))\r\n        if(result.resultCode === 0){\r\n            dispatch(isAuth(false))\r\n        }\r\n    }\r\n    catch (e) {\r\n        dispatch(setErrorApp(e.response.message))\r\n    }\r\n}\r\n\r\nexport const authMe = () => async (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const result = await authAPI.authMe()\r\n        if(result.resultCode === 0){\r\n            dispatch(isAuth(true))\r\n        }else {\r\n            dispatch(isAuth(false))\r\n        }\r\n        dispatch(changeAppStatus('idle'))\r\n    }\r\n    catch (e) {\r\n        dispatch(setErrorApp(e.response.message))\r\n    }\r\n}\r\n//type\r\ntype LoginActionType = AppActionType\r\n| AuthAction\r\nexport type AuthAction = ReturnType<typeof isAuth>\r\ntype DispatchLoginType = ThunkDispatch<AppRootStateType, unknown, LoginActionType>\r\n","import {authMe} from './login-reducer';\r\nimport {AppRootStateType} from './store';\r\nimport {ThunkAction} from 'redux-thunk';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading'\r\n\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    initialApp: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/INITIAL-APP':\r\n            return {...state, initialApp: action.initialApp}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const changeAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const);\r\nexport const setErrorApp = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const);\r\nexport const setInitialApp = (initialApp: boolean) => ({type: 'APP/INITIAL-APP', initialApp} as const);\r\n\r\n//thunk\r\nexport const initialAppState = ():AppThunkType => async (dispatch) => {\r\n    await dispatch(authMe());\r\n    dispatch(setInitialApp(true));\r\n\r\n}\r\n//type\r\ntype AppThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionType>\r\n\r\nexport type AppActionType = ReturnType<typeof changeAppStatus>\r\n    | ReturnType<typeof setErrorApp>\r\n    | ReturnType<typeof setInitialApp>\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    initialApp: boolean\r\n}\r\n","import {TaskType, todolistAPI} from '../api/todolistAPI';\r\nimport {AddTodolistType, RemoveTodolistType} from './todolists-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from './store';\r\nimport {changeAppStatus, setErrorApp} from './app-reducer';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'TASK-REDUCER/REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'TASK-REDUCER/ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [action.task, ...state[action.todolistId]]\r\n            }\r\n\r\n        case 'TASK-REDUCER/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.task} : t)\r\n            }\r\n\r\n        case 'TODOLIST-REDUCER/ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n\r\n        case 'TODOLIST-REDUCER/REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'TASK-REDUCER/SET-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creator\r\nexport const removeTaskAC = (todolistId: string, taskId: string) =>\r\n    ({type: 'TASK-REDUCER/REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const)\r\n\r\nexport const addTaskAC = (todolistId: string, task: TaskType) =>\r\n    ({type: 'TASK-REDUCER/ADD-TASK', task, todolistId} as const)\r\n\r\nexport const changeTaskStatusAC = (taskId: string, task: TaskType, todolistId: string) =>\r\n    ({type: 'TASK-REDUCER/CHANGE-TASK', task, todolistId, taskId} as const)\r\n\r\nexport const setTasksSuccess = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'TASK-REDUCER/SET-TASKS', tasks, todolistId} as const)\r\n\r\n\r\n// thunk\r\nexport const setTasks = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const data = await todolistAPI.getTasks(todolistId)\r\n        dispatch(changeAppStatus('idle'))\r\n        dispatch(setTasksSuccess(todolistId, data.items))\r\n    } catch (e) {\r\n        dispatch(setErrorApp(e.response.data.message))\r\n    }\r\n}\r\nexport const createTask = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const data = await todolistAPI.createTask(todolistId, title)\r\n        dispatch(changeAppStatus('idle'))\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTaskAC(todolistId, data.data.item))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setErrorApp(e.response.data.message))\r\n    }\r\n}\r\nexport const deleteTask = (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const data = await todolistAPI.deleteTask(todolistId, taskId)\r\n        dispatch(changeAppStatus('idle'))\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTaskAC(todolistId, taskId))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setErrorApp(e.response.data.message))\r\n    }\r\n}\r\nexport const updateTask = (todolistId: string, taskId: string, modal: TaskModalType) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(changeAppStatus('loading'))\r\n        try {\r\n            let task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n            if (!task) return\r\n            task = {\r\n                ...task,\r\n                ...modal\r\n            }\r\n            const data = await todolistAPI.updateTask(todolistId, taskId, task)\r\n            dispatch(changeAppStatus('idle'))\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTaskStatusAC(taskId, data.data.item, todolistId))\r\n            } else {\r\n                if (data.messages[0].length > 0) {\r\n                    dispatch(setErrorApp(data.messages[0]))\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            dispatch(setErrorApp(e.response.data.message))\r\n        }\r\n    }\r\n\r\n//type\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type TaskModalType = {\r\n    description?: string\r\n    title?: string\r\n    completed?: boolean\r\n    status?: number\r\n    priority?: number\r\n    deadline?: string\r\n    order?: number\r\n}\r\n\r\n// all actions\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTasksSuccess>\r\n    | RemoveTodolistType\r\n    | AddTodolistType\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../components/AddItemForm'\r\nimport {EditableSpan} from '../components/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../store/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {createTask, deleteTask, setTasks, TasksStateType, updateTask} from '../store/tasks-reducer';\r\nimport {AppRootStateType} from '../store/store';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(({todolist, ...props}: PropsType) => {\r\n    let allTasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setTasks(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTask = useCallback((id: string) => {\r\n        dispatch(deleteTask(todolist.id, id))\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTask(todolist.id, title))\r\n    }, [dispatch, todolist.id]);\r\n    const changeStatus = useCallback((id: string, status: number) => {\r\n        dispatch(updateTask(todolist.id, id, {status}))\r\n    }, [dispatch, todolist.id]);\r\n    const changeTaskTitle = useCallback((id, newTitle: string) => {\r\n        dispatch(updateTask(todolist.id, id, {title: newTitle}))\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(todolist.id)\r\n    }, [props, todolist.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(todolist.id, title)\r\n    }, [props, todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', todolist.id), [todolist.id, props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', todolist.id), [todolist.id, props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', todolist.id), [todolist.id, props])\r\n\r\n    let tasks = allTasks[todolist.id] ? allTasks[todolist.id] : []\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasks = tasks.filter(t => t.status === 0)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasks = tasks.filter(t => t.status === 2)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={todolist.entityStatus}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={todolist.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasks.map(t => <Task key={t.id} task={t}\r\n                                     removeTask={removeTask}\r\n                                     changeTaskTitle={changeTaskTitle}\r\n                                     changeTaskStatus={changeStatus}/>)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '15px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {todolistAPI, TodolistType} from '../api/todolistAPI';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\nimport {AppActionType, changeAppStatus, setErrorApp} from './app-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'TODOLIST-REDUCER/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'TODOLIST-REDUCER/SET-TODOLIST':\r\n            return [...action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: false})), ...state]\r\n        case 'TODOLIST-REDUCER/ADD-TODOLIST': {\r\n            return [{...action.todolist, filter: 'all', entityStatus: false}, ...state]\r\n        }\r\n        case 'TODOLIST-REDUCER/CHANGE-TODOLIST-FILTER':\r\n        case 'TODOLIST-REDUCER/CHANGE-STATUS':\r\n        case 'TODOLIST-REDUCER/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ?\r\n                {...tl, ...action.payload} : tl);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n// action creator\r\nexport const removeTodolist = (id: string) =>\r\n    ({type: 'TODOLIST-REDUCER/REMOVE-TODOLIST', id} as const);\r\nexport const addTodolistSuccess = (todolist: TodolistType) =>\r\n    ({type: 'TODOLIST-REDUCER/ADD-TODOLIST', todolist} as const);\r\nexport const changeTodolistTitle = (id: string, title: string) =>\r\n    ({type: 'TODOLIST-REDUCER/CHANGE-TODOLIST-TITLE', id, payload: {title}} as const);\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'TODOLIST-REDUCER/CHANGE-TODOLIST-FILTER', id, payload: {filter}} as const);\r\nexport const setTodolistSuccess = (todolists: Array<TodolistType>) =>\r\n    ({type: 'TODOLIST-REDUCER/SET-TODOLIST', todolists} as const);\r\nexport const setTodolistStatus = (id: string, entityStatus: boolean) =>\r\n    ({type: 'TODOLIST-REDUCER/CHANGE-STATUS', id, payload:{entityStatus}} as const);\r\n\r\n\r\n// Thunk\r\nexport const setTodolists = () => async (dispatch: ThunkTodolistDispatchType) => {\r\n    dispatch(changeAppStatus('loading'));\r\n    try {\r\n        const data = await todolistAPI.getTodolist();\r\n        dispatch(setTodolistSuccess(data));\r\n        dispatch(changeAppStatus('idle'));\r\n    } catch (e) {\r\n        dispatch(changeAppStatus('idle'))\r\n        dispatch(setErrorApp(e.response.data.message));\r\n    }\r\n}\r\nexport const addTodolistThunk = (title: string) => async (dispatch: ThunkTodolistDispatchType) => {\r\n    dispatch(changeAppStatus('loading'))\r\n    try {\r\n        const data = await todolistAPI.createTodolist(title);\r\n        dispatch(changeAppStatus('idle'));\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTodolistSuccess(data.data.item));\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(setErrorApp(e.response.data.message));\r\n    }\r\n}\r\nexport const deleteTodolist = (id: string) => async (dispatch: ThunkTodolistDispatchType) => {\r\n    dispatch(changeAppStatus('loading'));\r\n    dispatch(setTodolistStatus(id, true));\r\n    try {\r\n        const data = await todolistAPI.deleteTodolist(id)\r\n        dispatch(changeAppStatus('idle'));\r\n        dispatch(setTodolistStatus(id, false));\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTodolist(id));\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(setErrorApp(e.response.data.message));\r\n    }\r\n}\r\nexport const changeTodolist = (id: string, title: string) => async (dispatch: ThunkTodolistDispatchType) => {\r\n    dispatch(changeAppStatus('loading'));\r\n    dispatch(setTodolistStatus(id, true))\r\n    try {\r\n        const data = await todolistAPI.updateTitleTodolist(id, title);\r\n        dispatch(changeAppStatus('idle'));\r\n        dispatch(setTodolistStatus(id, false))\r\n        if(data.resultCode === 0) {\r\n            dispatch(changeTodolistTitle(id, title));\r\n        }\r\n    } catch (e) {\r\n        dispatch(changeAppStatus('idle'));\r\n        dispatch(setErrorApp(e.response.data.message));\r\n    }\r\n}\r\n// type\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType } & {entityStatus: false};\r\n\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>;\r\nexport type AddTodolistType = ReturnType<typeof addTodolistSuccess>;\r\nexport type SetTodolistsType = ReturnType<typeof setTodolistSuccess>;\r\nexport type TodolistStatusType = ReturnType<typeof setTodolistStatus>;\r\ntype ActionsType = RemoveTodolistType\r\n    | AppActionType\r\n    | AddTodolistType\r\n    | SetTodolistsType\r\n    | TodolistStatusType\r\n    | ReturnType<typeof changeTodolistTitle>\r\n    | ReturnType<typeof changeTodolistFilter>\r\n    | ReturnType<typeof setTodolistSuccess>\r\n\r\n\r\ntype ThunkTodolistType = ThunkAction<void, AppRootStateType, unknown, ActionsType>;\r\ntype ThunkTodolistDispatchType = ThunkDispatch<AppRootStateType, unknown, ActionsType>;\r\n","import {Grid, Paper} from '@material-ui/core';\r\nimport {Todolist} from './Todolist';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../store/store';\r\nimport {\r\n    addTodolistThunk,\r\n    changeTodolist,\r\n    changeTodolistFilter,\r\n    deleteTodolist,\r\n    FilterValuesType,\r\n    setTodolists,\r\n    TodolistDomainType\r\n} from '../store/todolists-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AddItemForm} from '../components/AddItemForm';\r\n\r\n\r\nexport const TodolistsList = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isAuth = useSelector((state: AppRootStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            dispatch(setTodolists())\r\n        }\r\n    }, [dispatch, isAuth])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilter(todolistId, value));\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodolist(id))\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolist(id, title))\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistThunk(title));\r\n    }, [dispatch]);\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <> <Grid container style={{padding: '25px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                changeFilter={changeFilter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../store/store';\r\nimport {setErrorApp} from '../store/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector( (state: AppRootStateType) => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch(setErrorApp(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginThunk} from '../store/login-reducer';\r\nimport {AppRootStateType} from '../store/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const isAuth = useSelector( (state: AppRootStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        validate: (value) => {\r\n            if (!value.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!value.password) {\r\n                return {\r\n                    password: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: true\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values))\r\n        },\r\n    })\r\n    if (isAuth){\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\r\n                    </FormGroup>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TodolistsList} from './todolist/TodolistsList';\r\nimport {AppRootStateType} from './store/store';\r\nimport {ErrorSnackbar} from './components/ErrorSnackBar';\r\nimport {Route} from 'react-router-dom';\r\nimport {Login} from './login/Login';\r\nimport {isAuth, logOut} from './store/login-reducer';\r\nimport {initialAppState} from './store/app-reducer';\r\n\r\n\r\nfunction AppWithRedux() {\r\n    const init = useSelector((state:AppRootStateType) => state.app.initialApp)\r\n    const status = useSelector((state:AppRootStateType) => state.app.status)\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        dispatch(initialAppState())\r\n    },[dispatch])\r\n    const logoutHandler = () => {\r\n        dispatch(logOut())\r\n    }\r\n    if(!init){\r\n        return <div>wait</div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {isAuth && <Button color=\"inherit\" onClick={logoutHandler}>log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{height: '40px'}}>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </div>\r\n            <Container fixed>\r\n                <Route exact path ={'/'} render={() => <TodolistsList/>}/>\r\n                <Route  path ={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {loginReducer} from './login-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: loginReducer,\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './store/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}